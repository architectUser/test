vuex是一个专为vue.js应用程序开发的状态管理模式。它采用集中式储蓄管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。
状态管理应用分为以下几个部分：
1.state，驱动应用的数据源
2.view，以声明方式将state映射到视图
3.action,相应在view上的用户输入导致的状态变化

new Vue({
  // state
  data () {
     return {
       count: 0
     }
  },
  // view
  template: `
   <div>{{count}}</div>
  `,
  //actions
  methods: {
    increment () {
      this.count++
    }
  }
})


多个组件共享状态时，单向数据流的简洁性很容易被破坏：
1.多个视图依赖于同一状态
2.来自不同视图的行为需要变更同一状态

问题一：
传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。
问题二：
采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。
以上两种问题通常会导致无法维护的代码
解决方案：把组件的共享状态抽取出来，以一个全局单例模式管理？在这种模式下，我们的组件树构成了一个巨大的“视图”，
任何组件都能获取状态或者触发行为！

Vuex是专门为vue.js设计的状态管理库，以利用vue.js的细粒度数据相应机制来进行高效的状态更新。
